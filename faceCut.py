import cv2
import os
import sys
import datetime as dt
import threading
import queue
import numpy as np
import time
import RPi.GPIO as GPIO  # GPIO –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO
LED_PIN = 16  # GPIO16
GPIO.setmode(GPIO.BCM)
GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.output(LED_PIN, GPIO.LOW)  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω

# –ü—É—Ç–∏ –∫ –≤–∞–∂–Ω—ã–º —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
cascade_path = "cascade.xml"
reference_folder = "img"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
if not os.path.exists(cascade_path):
    print("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.")
    sys.exit()

if not os.path.exists(reference_folder) or not os.path.isdir(reference_folder):
    print(f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {reference_folder}.")
    sys.exit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ª–∏—Ü
face_cascade = cv2.CascadeClassifier(cascade_path)

# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–º–µ—Ä—ã
video_capture = cv2.VideoCapture(0)
if not video_capture.isOpened():
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É.")
    sys.exit()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
video_capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
video_capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
output_dir = "captured"
os.makedirs(output_dir, exist_ok=True)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
result_queue = queue.Queue()
is_comparing = False
state_lock = threading.Lock()
scanning_active = False
running = True  # –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º

# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º
def control_led(recognized=False, duration=3):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.
    –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Å–≤–µ—Ç–æ–¥–∏–æ–¥ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    
    Args:
        recognized: True –µ—Å–ª–∏ –ª–∏—Ü–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω
    """
    if recognized:
        print("üü¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!")
        GPIO.output(LED_PIN, GPIO.HIGH)  # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
        time.sleep(duration)  # –°–≤–µ—Ç–æ–¥–∏–æ–¥ –≥–æ—Ä–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        GPIO.output(LED_PIN, GPIO.LOW)   # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
    else:
        # –ú–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º 3 —Ä–∞–∑–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
        print("üî¥ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        for _ in range(3):
            GPIO.output(LED_PIN, GPIO.HIGH)
            time.sleep(0.2)
            GPIO.output(LED_PIN, GPIO.LOW)
            time.sleep(0.2)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
def preprocess_image(img):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    if img is None or img.size == 0:
        return None
        
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    img_equalized = cv2.equalizeHist(img)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
    img_resized = cv2.resize(img_equalized, (100, 100))
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ì–∞—É—Å—Å–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
    img_filtered = cv2.GaussianBlur(img_resized, (5, 5), 0)
    
    return img_filtered

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–∏—Ü
def compare_faces_opencv(saved_path):
    global is_comparing
    with state_lock:
        is_comparing = True
    
    access_granted = False  # –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        saved_img = cv2.imread(saved_path, cv2.IMREAD_GRAYSCALE)
        saved_processed = preprocess_image(saved_img)
        if saved_processed is None:
            result_queue.put("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ SIFT
        sift = cv2.SIFT_create()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        kp1, des1 = sift.detectAndCompute(saved_processed, None)
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
        if des1 is None or len(des1) == 0:
            result_queue.put("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        db_images = [img for img in os.listdir(reference_folder)
                     if os.path.isfile(os.path.join(reference_folder, img))
                     and img.lower().endswith(('.jpg', '.jpeg', '.png'))]
        
        if not db_images:
            result_queue.put("‚ö†Ô∏è –í –ø–∞–ø–∫–µ —ç—Ç–∞–ª–æ–Ω–æ–≤ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –¥–ª—è SIFT
        bf = cv2.BFMatcher()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        best_match = None
        best_score = 0
        match_found = False
        
        for db_img in db_images:
            db_path = os.path.join(reference_folder, db_img)
            ref_img = cv2.imread(db_path, cv2.IMREAD_GRAYSCALE)
            
            if ref_img is None:
                result_queue.put(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {db_img}")
                continue
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ref_processed = preprocess_image(ref_img)
            if ref_processed is None:
                result_queue.put(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {db_img}")
                continue
                
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            kp2, des2 = sift.detectAndCompute(ref_processed, None)
            
            if des2 is None or len(des2) == 0:
                result_queue.put(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {db_img}")
                continue
            
            # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ –º–µ—Ç–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
            # –ú–µ—Ç–æ–¥ 1: SIFT —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
            matches = bf.knnMatch(des1, des2, k=2)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            good_matches = []
            for m, n in matches:
                if m.distance < 0.75 * n.distance:  # –¢–µ—Å—Ç –õ–æ—É –¥–ª—è –æ—Ç–±–æ—Ä–∞ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    good_matches.append(m)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            match_score1 = len(good_matches) / max(len(kp1), len(kp2)) * 100 if max(len(kp1), len(kp2)) > 0 else 0
            
            # –ú–µ—Ç–æ–¥ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
            hist1 = cv2.calcHist([saved_processed], [0], None, [256], [0, 256])
            hist2 = cv2.calcHist([ref_processed], [0], None, [256], [0, 256])
            
            cv2.normalize(hist1, hist1, 0, 1, cv2.NORM_MINMAX)
            cv2.normalize(hist2, hist2, 0, 1, cv2.NORM_MINMAX)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            hist_score = cv2.compareHist(hist1, hist2, cv2.HISTCMP_CORREL) * 100  # 0-100%
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—Å–∞)
            combined_score = 0.7 * match_score1 + 0.3 * hist_score
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            result_queue.put(f"–ê–Ω–∞–ª–∏–∑ {db_img}: SIFT={match_score1:.1f}%, –ì–∏—Å—Ç={hist_score:.1f}%, –ò—Ç–æ–≥={combined_score:.1f}%")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if combined_score > best_score:
                best_score = combined_score
                best_match = db_img
            
            # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
            if combined_score > 30:  # –≠—Ç–æ—Ç –ø–æ—Ä–æ–≥ –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π
                match_found = True
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if match_found:
            if best_match:
                result_queue.put(f"‚úÖ –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_match} (–æ—Ü–µ–Ω–∫–∞={best_score:.1f}%)")
                print("–ü—Ä–∏–≤–µ—Ç üòò")
                access_granted = True  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –¥–æ—Å—Ç—É–ø–∞
        else:
            result_queue.put(f"‚ö†Ô∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_match or '–Ω–µ—Ç'} ({best_score:.1f}%)")
            
    except Exception as e:
        result_queue.put(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}")
    finally:
        result_queue.put("DONE")
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        led_thread = threading.Thread(target=control_led, args=(access_granted, 5))
        led_thread.start()
        
        with state_lock:
            is_comparing = False

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def auto_scan():
    global scanning_active, running
    
    print("üìä –ó–∞–ø—É—â–µ–Ω —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
    
    while running:
        try:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if not is_comparing:
                with state_lock:
                    if scanning_active:
                        time.sleep(0.5)  # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –µ—Å–ª–∏ —É–∂–µ —Å–∫–∞–Ω–∏—Ä—É–µ–º
                        continue
                    scanning_active = True
                
                print("\nüîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
                ret, frame = video_capture.read()
                if not ret:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞.")
                    scanning_active = False
                    time.sleep(1)
                    continue
                    
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                faces = face_cascade.detectMultiScale(
                    gray, 
                    scaleFactor=1.1, 
                    minNeighbors=5,
                    minSize=(30, 30)
                )
                
                if len(faces) == 0:
                    print("‚ö†Ô∏è –õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
                    scanning_active = False
                    time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue
                    
                print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {len(faces)}")
                
                # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ª–∏—Ü–æ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –±–ª–∏–∂–∞–π—à–µ–µ –∫ –∫–∞–º–µ—Ä–µ)
                largest_face = max(faces, key=lambda rect: rect[2] * rect[3])
                (x, y, w, h) = largest_face
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ª–∏—Ü–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                x_extended = max(0, x - int(w * 0.2))
                y_extended = max(0, y - int(h * 0.2))
                w_extended = min(frame.shape[1] - x_extended, int(w * 1.4))
                h_extended = min(frame.shape[0] - y_extended, int(h * 1.4))
                
                face_img = frame[y_extended:y_extended + h_extended, x_extended:x_extended + w_extended]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞
                timestamp = dt.datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f"face_{timestamp}.jpg"
                saved_path = os.path.join(output_dir, filename)
                cv2.imwrite(saved_path, face_img)
                
                print(f"üì∏ –õ–∏—Ü–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                print(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ –ø–∞–ø–∫–∏ '{reference_folder}'...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                comparison_thread = threading.Thread(target=compare_faces_opencv, args=(saved_path,))
                comparison_thread.daemon = True
                comparison_thread.start()
                
                # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                while True:
                    try:
                        result = result_queue.get(timeout=10)  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                        if result == "DONE":
                            print("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                            break
                        else:
                            print(result)
                    except queue.Empty:
                        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                        break
                
                scanning_active = False
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
            else:
                time.sleep(0.5)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            scanning_active = False
            time.sleep(1)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    global running
    try:
        print("üîê –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º GPIO –∑–∞–ø—É—â–µ–Ω–∞")
        print("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scan_thread = threading.Thread(target=auto_scan)
        scan_thread.daemon = True
        scan_thread.start()
        
        # –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\n‚úã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        running = False
        # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Ç–æ–∫–∞–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        time.sleep(1)
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        video_capture.release()
        GPIO.cleanup()
        print("üîÑ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    main()
